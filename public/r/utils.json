{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "utils",
  "type": "registry:lib",
  "title": "Utils",
  "description": "Utility functions including focus styles, formatters, and Tremor Raw helpers.",
  "files": [
    {
      "path": "registry/default/utils/utils.ts",
      "content": "// Tremor Raw cx [v0.0.0]\n\nimport clsx, { type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cx(...args: ClassValue[]) {\n  return twMerge(clsx(...args))\n}\n\n// Tremor Raw focusInput [v0.0.1]\n\nexport const focusInput = [\n  // base\n  \"focus:ring-2\",\n  // ring color\n  \"focus:ring-indigo-200 focus:dark:ring-indigo-700/30\",\n  // border color\n  \"focus:border-indigo-500 focus:dark:border-indigo-700\",\n]\n\n// Tremor Raw focusRing [v0.0.1]\n\nexport const focusRing = [\n  // base\n  \"outline outline-offset-2 outline-0 focus-visible:outline-2\",\n  // outline color\n  \"outline-indigo-500 dark:outline-indigo-500\",\n]\n\n// Tremor Raw hasErrorInput [v0.0.1]\n\nexport const hasErrorInput = [\n  // base\n  \"ring-2\",\n  // border color\n  \"border-red-500 dark:border-red-700\",\n  // ring color\n  \"ring-red-200 dark:ring-red-700/30\",\n]\n\n// Number formatter function\n\nexport const usNumberformatter = (number: number, decimals = 0) =>\n  Intl.NumberFormat(\"us\", {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  })\n    .format(Number(number))\n    .toString()\n\nexport const percentageFormatter = (number: number, decimals = 1) => {\n  const formattedNumber = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  }).format(number)\n  const symbol = number > 0 && number !== Infinity ? \"+\" : \"\"\n\n  return `${symbol}${formattedNumber}`\n}\n\nexport const millionFormatter = (number: number, decimals = 1) => {\n  const formattedNumber = new Intl.NumberFormat(\"en-US\", {\n    style: \"decimal\",\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  }).format(number)\n  return `${formattedNumber}M`\n}\nexport const formatters: { [key: string]: any } = {\n  currency: (number: number, currency: string = \"USD\") =>\n    new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: currency,\n    }).format(number),\n  unit: (number: number) => `${usNumberformatter(number)}`,\n}",
      "type": "registry:lib"
    }
  ]
}