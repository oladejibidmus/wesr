{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dashboard-overview",
  "type": "registry:block",
  "title": "Dashboard Overview",
  "description": "A complete dashboard overview page with charts and analytics.",
  "dependencies": [
    "date-fns",
    "react-day-picker"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "line-chart",
    "utils"
  ],
  "files": [
    {
      "path": "registry/default/dashboard-overview/page.tsx",
      "content": "\"use client\"\n\nimport { ChartCard } from \"./components/dashboard-chart-card\"\nimport { cx } from \"@/registry/default/utils/utils\"\nimport { subDays, toDate } from \"date-fns\"\nimport React from \"react\"\nimport { DateRange } from \"react-day-picker\"\n\nexport type PeriodValue = \"previous-period\" | \"last-year\" | \"no-comparison\"\n\nconst categories: {\n  title: keyof any\n  type: \"currency\" | \"unit\"\n}[] = [\n  {\n    title: \"Rows read\",\n    type: \"unit\",\n  },\n  {\n    title: \"Rows written\", \n    type: \"unit\",\n  },\n  {\n    title: \"Queries\",\n    type: \"unit\",\n  },\n  {\n    title: \"Payments completed\",\n    type: \"currency\",\n  },\n  {\n    title: \"Sign ups\",\n    type: \"unit\",\n  },\n  {\n    title: \"Logins\",\n    type: \"unit\",\n  },\n]\n\nconst maxDate = new Date()\n\nexport default function Overview() {\n  const [selectedDates, setSelectedDates] = React.useState<\n    DateRange | undefined\n  >({\n    from: subDays(maxDate, 30),\n    to: maxDate,\n  })\n  const [selectedPeriod, setSelectedPeriod] =\n    React.useState<PeriodValue>(\"last-year\")\n\n  const [selectedCategories, setSelectedCategories] = React.useState<string[]>(\n    categories.map((category) => category.title),\n  )\n\n  return (\n    <>\n      <section aria-labelledby=\"usage-overview\">\n        <h1\n          id=\"usage-overview\"\n          className=\"mt-16 scroll-mt-8 text-lg font-semibold text-gray-900 sm:text-xl dark:text-gray-50\"\n        >\n          Overview\n        </h1>\n        <dl\n          className={cx(\n            \"mt-10 grid grid-cols-1 gap-14 sm:grid-cols-1 md:grid-cols-2 xl:grid-cols-3\",\n          )}\n        >\n          {categories\n            .filter((category) => selectedCategories.includes(category.title))\n            .map((category) => {\n              return (\n                <ChartCard\n                  key={category.title}\n                  title={category.title}\n                  type={category.type}\n                  selectedDates={selectedDates}\n                  selectedPeriod={selectedPeriod}\n                />\n              )\n            })}\n        </dl>\n      </section>\n    </>\n  )\n}",
      "type": "registry:page",
      "target": "app/overview/page.tsx"
    },
    {
      "path": "registry/default/dashboard-overview/components/dashboard-chart-card.tsx",
      "content": "import { Badge } from \"@/registry/default/badge/badge\"\nimport { LineChart } from \"@/registry/default/line-chart/line-chart\"\nimport { cx, formatters, percentageFormatter } from \"@/registry/default/utils/utils\"\nimport {\n  eachDayOfInterval,\n  formatDate,\n  interval,\n  isWithinInterval,\n} from \"date-fns\"\nimport { DateRange } from \"react-day-picker\"\n\nexport type PeriodValue = \"previous-period\" | \"last-year\" | \"no-comparison\"\n\nexport type OverviewData = {\n  date: Date\n  \"Rows read\": number\n  \"Rows written\": number\n  \"Queries\": number\n  \"Payments completed\": number\n  \"Sign ups\": number\n  \"Logins\": number\n  \"Sign outs\": number\n  \"Support calls\": number\n}\n\nexport type CardProps = {\n  title: keyof OverviewData\n  type: \"currency\" | \"unit\"\n  selectedDates: DateRange | undefined\n  selectedPeriod: PeriodValue\n  isThumbnail?: boolean\n}\n\nconst formattingMap = {\n  currency: formatters.currency,\n  unit: formatters.unit,\n}\n\nexport const getBadgeType = (value: number) => {\n  if (value > 0) {\n    return \"success\"\n  } else if (value < 0) {\n    if (value < -50) {\n      return \"warning\"\n    }\n    return \"error\"\n  } else {\n    return \"neutral\"\n  }\n}\n\nexport const getPeriod = (\n  selectedDates: DateRange | undefined,\n  selectedPeriod: PeriodValue,\n): DateRange | undefined => {\n  if (!selectedDates?.from || !selectedDates?.to) return undefined\n  \n  const daysDiff = Math.ceil(\n    (selectedDates.to.getTime() - selectedDates.from.getTime()) / (1000 * 60 * 60 * 24)\n  )\n  \n  if (selectedPeriod === \"previous-period\") {\n    return {\n      from: new Date(selectedDates.from.getTime() - daysDiff * 24 * 60 * 60 * 1000),\n      to: selectedDates.from,\n    }\n  } else if (selectedPeriod === \"last-year\") {\n    return {\n      from: new Date(selectedDates.from.getFullYear() - 1, selectedDates.from.getMonth(), selectedDates.from.getDate()),\n      to: new Date(selectedDates.to.getFullYear() - 1, selectedDates.to.getMonth(), selectedDates.to.getDate()),\n    }\n  }\n  \n  return undefined\n}\n// Sample data for demonstration - replace with actual data source\nconst sampleOverviews: OverviewData[] = [\n  {\n    date: new Date(\"2024-01-01\"),\n    \"Rows read\": 1000,\n    \"Rows written\": 500,\n    \"Queries\": 200,\n    \"Payments completed\": 1500,\n    \"Sign ups\": 50,\n    \"Logins\": 300,\n    \"Sign outs\": 250,\n    \"Support calls\": 10,\n  },\n  // Add more sample data as needed\n]\n\nexport function ChartCard({\n  title,\n  type,\n  selectedDates,\n  selectedPeriod,\n  isThumbnail,\n}: CardProps) {\n  const formatter = formattingMap[type]\n  const selectedDatesInterval =\n    selectedDates?.from && selectedDates?.to\n      ? interval(selectedDates.from, selectedDates.to)\n      : null\n  const allDatesInInterval =\n    selectedDates?.from && selectedDates?.to\n      ? eachDayOfInterval(interval(selectedDates.from, selectedDates.to))\n      : null\n  const prevDates = getPeriod(selectedDates, selectedPeriod)\n\n  const prevDatesInterval =\n    prevDates?.from && prevDates?.to\n      ? interval(prevDates.from, prevDates.to)\n      : null\n\n  const data = sampleOverviews\n    .filter((overview) => {\n      if (selectedDatesInterval) {\n        return isWithinInterval(overview.date, selectedDatesInterval)\n      }\n      return true\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n\n  const prevData = sampleOverviews    .filter((overview) => {\n      if (prevDatesInterval) {\n        return isWithinInterval(overview.date, prevDatesInterval)\n      }\n      return false\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n\n  const chartData = allDatesInInterval\n    ?.map((date, index) => {\n      const overview = data[index]\n      const prevOverview = prevData[index]\n      const value = (overview?.[title] as number) || null\n      const previousValue = (prevOverview?.[title] as number) || null\n\n      return {\n        title,\n        date: date,\n        formattedDate: formatDate(date, \"dd/MM/yyyy\"),\n        value,\n        previousDate: prevOverview?.date,\n        previousFormattedDate: prevOverview\n          ? formatDate(prevOverview.date, \"dd/MM/yyyy\")\n          : null,\n        previousValue:\n          selectedPeriod !== \"no-comparison\" ? previousValue : null,\n        evolution:\n          selectedPeriod !== \"no-comparison\" && value && previousValue\n            ? (value - previousValue) / previousValue\n            : undefined,\n      }\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n\n  const categories =\n    selectedPeriod === \"no-comparison\" ? [\"value\"] : [\"value\", \"previousValue\"]\n  const value =\n    chartData?.reduce((acc, item) => acc + (item.value || 0), 0) || 0\n  const previousValue =\n    chartData?.reduce((acc, item) => acc + (item.previousValue || 0), 0) || 0  const evolution =\n    selectedPeriod !== \"no-comparison\"\n      ? (value - previousValue) / previousValue\n      : 0\n\n  return (\n    <div className={cx(\"transition\")}>\n      <div className=\"flex items-center justify-between gap-x-2\">\n        <div className=\"flex items-center gap-x-2\">\n          <dt className=\"font-bold text-gray-900 sm:text-sm dark:text-gray-50\">\n            {title}\n          </dt>\n          {selectedPeriod !== \"no-comparison\" && (\n            <Badge variant={getBadgeType(evolution)}>\n              {percentageFormatter(evolution)}\n            </Badge>\n          )}\n        </div>\n      </div>\n      <div className=\"mt-2 flex items-baseline justify-between\">\n        <dd className=\"text-xl text-gray-900 dark:text-gray-50\">\n          {formatter(value)}\n        </dd>\n        {selectedPeriod !== \"no-comparison\" && (\n          <dd className=\"text-sm text-gray-500\">\n            from {formatter(previousValue)}\n          </dd>\n        )}\n      </div>\n      <LineChart\n        className=\"mt-6 h-32\"\n        data={chartData || []}\n        index=\"formattedDate\"\n        colors={[\"indigo\", \"gray\"]}\n        startEndOnly={true}\n        valueFormatter={(value) => formatter(value as number)}\n        showYAxis={false}\n        showLegend={false}\n        categories={categories}\n        showTooltip={isThumbnail ? false : true}\n        autoMinValue\n      />\n    </div>\n  )\n}",
      "type": "registry:component"
    }
  ]
}