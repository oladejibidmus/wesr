{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "line-chart",
  "type": "registry:component",
  "title": "Line Chart",
  "description": "A customizable line chart component using Recharts.",
  "dependencies": [
    "recharts",
    "tailwind-variants",
    "@remixicon/react"
  ],
  "registryDependencies": [
    "utils",
    "badge"
  ],
  "files": [
    {
      "path": "registry/default/line-chart/line-chart.tsx",
      "content": "// Tremor Raw LineChart [v0.0.0]\n\n\"use client\"\n\nimport { RiArrowLeftSLine, RiArrowRightSLine } from \"@remixicon/react\"\nimport React from \"react\"\nimport {\n  CartesianGrid,\n  Dot,\n  Label,\n  Line,\n  Legend as RechartsLegend,\n  LineChart as RechartsLineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\"\nimport { AxisDomain } from \"recharts/types/util/types\"\n\nimport {\n  AvailableChartColors,\n  AvailableChartColorsKeys,\n  constructCategoryColors,\n  getColorClassName,\n  getYAxisDomain,\n  hasOnlyOneValueForKey,\n} from \"@/registry/default/line-chart/lib/chart-utils\"\nimport { useOnWindowResize } from \"@/registry/default/line-chart/lib/use-on-window-resize\"\nimport { cx, percentageFormatter } from \"@/registry/default/utils/utils\"\nimport { Badge } from \"@/registry/default/badge/badge\"\n\n// getBadgeType function from the dashboard component\nexport const getBadgeType = (value: number) => {\n  if (value > 0) {\n    return \"success\"\n  } else if (value < 0) {\n    if (value < -50) {\n      return \"warning\"\n    }\n    return \"error\"\n  } else {\n    return \"neutral\"\n  }\n}\n\n//#region Legend\n\ninterface LegendItemProps {\n  name: string\n  color: AvailableChartColorsKeys\n  onClick?: (name: string, color: AvailableChartColorsKeys) => void\n  activeLegend?: string\n}\n\nconst LegendItem = ({\n  name,\n  color,\n  onClick,\n  activeLegend,\n}: LegendItemProps) => {\n  const hasOnValueChange = !!onClick\n  return (\n    <li\n      className={cx(\n        // base\n        \"group inline-flex flex-nowrap items-center gap-1.5 whitespace-nowrap rounded px-2 py-1 transition\",\n        hasOnValueChange\n          ? \"bg-transpaent cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\"\n          : \"cursor-default\",\n      )}\n      onClick={(e) => {\n        e.stopPropagation()\n        onClick?.(name, color)\n      }}\n    >\n      <span\n        className={cx(\n          \"h-[3px] w-3.5 shrink-0 rounded-full\",\n          getColorClassName(color, \"bg\"),\n          activeLegend && activeLegend !== name ? \"opacity-40\" : \"opacity-100\",\n        )}\n        aria-hidden=\"true\"\n      />\n      <p\n        className={cx(\n          // base\n          \"truncate whitespace-nowrap text-xs\",\n          // text color\n          \"text-gray-700 dark:text-gray-300\",\n          hasOnValueChange &&\n            \"group-hover:text-gray-900 dark:group-hover:text-gray-50\",\n          activeLegend && activeLegend !== name ? \"opacity-40\" : \"opacity-100\",\n        )}\n      >\n        {name}\n      </p>\n    </li>\n  )\n}\ninterface ScrollButtonProps {\n  icon: React.ElementType\n  onClick?: () => void\n  disabled?: boolean\n}\n\nconst ScrollButton = ({ icon, onClick, disabled }: ScrollButtonProps) => {\n  const Icon = icon\n  const [isPressed, setIsPressed] = React.useState(false)\n  const intervalRef = React.useRef<NodeJS.Timeout | null>(null)\n\n  React.useEffect(() => {\n    if (isPressed) {\n      intervalRef.current = setInterval(() => {\n        onClick?.()\n      }, 300)\n    } else {\n      clearInterval(intervalRef.current as NodeJS.Timeout)\n    }\n    return () => clearInterval(intervalRef.current as NodeJS.Timeout)\n  }, [isPressed, onClick])\n\n  React.useEffect(() => {\n    if (disabled) {\n      clearInterval(intervalRef.current as NodeJS.Timeout)\n      setIsPressed(false)\n    }\n  }, [disabled])\n\n  return (\n    <button\n      type=\"button\"",
      "type": "registry:component"
    },
    {
      "path": "registry/default/line-chart/lib/chart-utils.ts",
      "content": "// Tremor Raw chartColors [v0.0.0]\n\nexport type ColorUtility = \"bg\" | \"stroke\" | \"fill\" | \"text\"\n\nexport const chartColors = {\n  blue: {\n    bg: \"bg-blue-500\",\n    stroke: \"stroke-blue-500\",\n    fill: \"fill-blue-500\",\n    text: \"text-blue-500\",\n  },\n  emerald: {\n    bg: \"bg-emerald-500\",\n    stroke: \"stroke-emerald-500\",\n    fill: \"fill-emerald-500\",\n    text: \"text-emerald-500\",\n  },\n  violet: {\n    bg: \"bg-violet-500\",\n    stroke: \"stroke-violet-500\",\n    fill: \"fill-violet-500\",\n    text: \"text-violet-500\",\n  },\n  amber: {\n    bg: \"bg-amber-500\",\n    stroke: \"stroke-amber-500\",\n    fill: \"fill-amber-500\",\n    text: \"text-amber-500\",\n  },\n  gray: {\n    bg: \"bg-gray-400 dark:bg-gray-600\",\n    stroke: \"stroke-gray-400 dark:stroke-gray-600\",\n    fill: \"fill-gray-400 dark:fill-gray-600\",\n    text: \"text-gray-400 dark:text-gray-600\",\n  },  cyan: {\n    bg: \"bg-cyan-500\",\n    stroke: \"stroke-cyan-500\",\n    fill: \"fill-cyan-500\",\n    text: \"text-cyan-500\",\n  },\n  indigo: {\n    bg: \"bg-indigo-600 dark:bg-indigo-500\",\n    stroke: \"stroke-indigo-600 dark:stroke-indigo-500\",\n    fill: \"fill-indigo-600 dark:fill-indigo-500\",\n    text: \"text-indigo-600 dark:text-indigo-500\",\n  },\n  pink: {\n    bg: \"bg-pink-500\",\n    stroke: \"stroke-pink-500\",\n    fill: \"fill-pink-500\",\n    text: \"text-pink-500\",\n  },\n} as const satisfies {\n  [color: string]: {\n    [key in ColorUtility]: string\n  }\n}\n\nexport type AvailableChartColorsKeys = keyof typeof chartColors\n\nexport const AvailableChartColors: AvailableChartColorsKeys[] = Object.keys(\n  chartColors,\n) as Array<AvailableChartColorsKeys>\n\nexport const constructCategoryColors = (\n  categories: string[],\n  colors: AvailableChartColorsKeys[],\n): Map<string, AvailableChartColorsKeys> => {\n  const categoryColors = new Map<string, AvailableChartColorsKeys>()\n  categories.forEach((category, index) => {\n    categoryColors.set(category, colors[index % colors.length])\n  })\n  return categoryColors\n}\nexport const getColorClassName = (\n  color: AvailableChartColorsKeys,\n  type: ColorUtility,\n): string => {\n  const fallbackColor = {\n    bg: \"bg-gray-500\",\n    stroke: \"stroke-gray-500\",\n    fill: \"fill-gray-500\",\n    text: \"text-gray-500\",\n  }\n  return chartColors[color]?.[type] ?? fallbackColor[type]\n}\n\n// Tremor Raw getYAxisDomain [v0.0.0]\n\nexport const getYAxisDomain = (\n  autoMinValue: boolean,\n  minValue: number | undefined,\n  maxValue: number | undefined,\n) => {\n  const minDomain = autoMinValue ? \"auto\" : (minValue ?? 0)\n  const maxDomain = maxValue ?? \"auto\"\n  return [minDomain, maxDomain]\n}\n\n// Tremor Raw hasOnlyOneValueForKey [v0.1.0]\n\nexport function hasOnlyOneValueForKey(\n  array: any[],\n  keyToCheck: string,\n): boolean {\n  const val: any[] = []\n\n  for (const obj of array) {\n    if (Object.prototype.hasOwnProperty.call(obj, keyToCheck)) {\n      val.push(obj[keyToCheck])\n      if (val.length > 1) {\n        return false\n      }\n    }\n  }\n\n  return true\n}",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/line-chart/lib/use-on-window-resize.tsx",
      "content": "// Tremor Raw useOnWindowResize [v0.0.0]\n\nimport * as React from \"react\"\n\nexport const useOnWindowResize = (handler: { (): void }) => {\n  React.useEffect(() => {\n    const handleResize = () => {\n      handler()\n    }\n    handleResize()\n    window.addEventListener(\"resize\", handleResize)\n\n    return () => window.removeEventListener(\"resize\", handleResize)\n  }, [handler])\n}",
      "type": "registry:hook"
    }
  ]
}